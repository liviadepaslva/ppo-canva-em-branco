// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

model Usuario {
  id            Int      @id @default(autoincrement())
  nomeUsuario   String   @unique
  email         String   @unique
  senhaHash     String
  biografia     String?
  urlFotoPerfil String?
  criadoEm      DateTime @default(now())
  atualizadoEm  DateTime @updatedAt

  publicacoes Publicacao[]
  comentarios Comentario[]
  curtidas    Curtida[]

  seguindo   Seguir[] @relation("UsuarioSeguindo")
  seguidores Seguir[] @relation("UsuarioSeguidores")
}

model Publicacao {
  id        Int      @id @default(autoincrement())
  titulo    String
  conteudo  String
  criadoEm  DateTime @default(now())
  categoria String?

  autorId Int
  autor   Usuario @relation(fields: [autorId], references: [id])

  comentarios Comentario[]
  curtidas    Curtida[]
  imagens     Imagem[]
}

model Imagem {
  id        Int      @id @default(autoincrement())
  url       String
  descricao String? // descrição para o alt
  ordem     Int?
  criadoEm  DateTime @default(now())

  // relacionamento p/ imagens e publicação
  publicacaoId Int
  publicacao   Publicacao @relation(fields: [publicacaoId], references: [id])
}

model Comentario {
  id       Int      @id @default(autoincrement())
  conteudo String
  criadoEm DateTime @default(now())

  autorId Int
  autor   Usuario @relation(fields: [autorId], references: [id])

  publicacaoId Int
  publicacao   Publicacao @relation(fields: [publicacaoId], references: [id])
}

model Curtida {
  id       Int      @id @default(autoincrement())
  criadoEm DateTime @default(now())

  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  publicacaoId Int
  publicacao   Publicacao @relation(fields: [publicacaoId], references: [id])

  @@unique([usuarioId, publicacaoId])
}

model Seguir {
  seguidorId Int
  seguindoId Int
  criadoEm   DateTime @default(now())

  seguidor Usuario @relation("UsuarioSeguindo", fields: [seguidorId], references: [id])
  seguindo Usuario @relation("UsuarioSeguidores", fields: [seguindoId], references: [id])

  @@id([seguidorId, seguindoId])
}
