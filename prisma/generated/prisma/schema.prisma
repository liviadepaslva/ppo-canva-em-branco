// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          Int      @id @default(autoincrement())
  nomeUsuario String   @unique
  email       String   @unique
  senhaHash   String
  criadoEm    DateTime @default(now())

  posts       Post[]
  comentarios Comentario[]
  curtidas    Curtida[]

  @@map("usuarios")
}

model Post {
  id        Int      @id @default(autoincrement())
  titulo    String
  conteudo  String?
  categoria String
  criadoEm  DateTime @default(now())
  autorId   Int

  // Relations
  autor       Usuario      @relation(fields: [autorId], references: [id], onDelete: Cascade)
  imagens     Imagem[]
  comentarios Comentario[]
  curtidas    Curtida[]

  @@map("posts")
}

model Imagem {
  id        Int     @id @default(autoincrement())
  url       String
  descricao String?
  ordem     Int     @default(1)
  postId    Int

  // Relations
  publicacao Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("imagens")
}

model Comentario {
  id       Int      @id @default(autoincrement())
  conteudo String
  criadoEm DateTime @default(now())
  autorId  Int
  postId   Int

  // Relations
  autor      Usuario @relation(fields: [autorId], references: [id], onDelete: Cascade)
  publicacao Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comentarios")
}

model Curtida {
  id      Int @id @default(autoincrement())
  autorId Int
  postId  Int

  // Relations
  autor      Usuario @relation(fields: [autorId], references: [id], onDelete: Cascade)
  publicacao Post    @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Prevent duplicate likes
  @@unique([autorId, postId])
  @@map("curtidas")
}
