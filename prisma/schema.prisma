// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          Int      @id @default(autoincrement())
  nomeUsuario String   @unique
  email       String   @unique
  senhaHash   String
  criadoEm    DateTime @default(now())
  
  // Relations
  publicacoes Publicacao[]
  comentarios Comentario[]
  curtidas    Curtida[]
  
  @@map("usuarios")
}

model Publicacao {
  id        Int      @id @default(autoincrement())
  titulo    String
  conteudo  String?
  categoria String
  criadoEm  DateTime @default(now())
  autorId   Int
  
  // Relations
  autor       Usuario      @relation(fields: [autorId], references: [id], onDelete: Cascade)
  imagens     Imagem[]
  comentarios Comentario[]
  curtidas    Curtida[]
  
  @@map("publicacoes")
}

model Imagem {
  id           Int    @id @default(autoincrement())
  url          String
  descricao    String?
  ordem        Int    @default(1)
  publicacaoId Int
  
  // Relations
  publicacao Publicacao @relation(fields: [publicacaoId], references: [id], onDelete: Cascade)
  
  @@map("imagens")
}

model Comentario {
  id           Int      @id @default(autoincrement())
  conteudo     String
  criadoEm     DateTime @default(now())
  autorId      Int
  publicacaoId Int
  
  // Relations
  autor      Usuario     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  publicacao Publicacao  @relation(fields: [publicacaoId], references: [id], onDelete: Cascade)
  
  @@map("comentarios")
}

model Curtida {
  id           Int @id @default(autoincrement())
  autorId      Int
  publicacaoId Int
  
  // Relations
  autor      Usuario     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  publicacao Publicacao  @relation(fields: [publicacaoId], references: [id], onDelete: Cascade)
  
  // Prevent duplicate likes
  @@unique([autorId, publicacaoId])
  @@map("curtidas")
}